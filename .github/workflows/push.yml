name: build and publish v8 libs
on: [push]

env:
  V8_VERSION: "13.9"

defaults:
  run:
    shell: bash

jobs:

  build-linux-x64:
#    if: ${{ false }}  # disable
    name: linux-gcc
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        platform: [x64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: compile v8
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          export PATH="$GITHUB_WORKSPACE/depot_tools:${PATH}"
          gclient
          fetch v8
          cd ${{ github.workspace }}/v8
          git checkout branch-heads/$V8_VERSION
          gclient sync
          ./build/install-build-deps.sh
          mkdir -p out.gn/linux.${{ matrix.platform }}.release/
          cp ${{ github.workspace }}/args.linux.${{ matrix.platform }}.gn $GITHUB_WORKSPACE/v8/out.gn/linux.${{ matrix.platform }}.release/args.gn
          gn gen out.gn/linux.${{ matrix.platform }}.release
          ninja v8_monolith -C out.gn/linux.${{ matrix.platform }}.release/
          gn args --list out.gn/linux.${{ matrix.platform }}.release
          tar -zcvf ../include.tar.gz include
          tar -zcvf ../src.tar.gz src
          gzip -9 -c out.gn/linux.${{ matrix.platform }}.release/obj/libv8_monolith.a > ../libv8_monolith-linux-${{ matrix.platform }}.a.gz
          tar -zcvf ../gen-linux-${{ matrix.platform }}.tar.gz out.gn/linux.${{ matrix.platform }}.release/gen
      - name: Upload headers
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/include.tar.gz
          name: include.tar.gz
      - name: Upload source
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/src.tar.gz
          name: src.tar.gz
      - name: Upload static library
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/libv8_monolith-linux-${{ matrix.platform }}.a.gz
          name: libv8_monolith-linux-${{ matrix.platform }}.a.gz
      - name: Upload generated source
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/gen-linux-${{ matrix.platform }}.tar.gz
          name: gen-linux-${{ matrix.platform }}.tar.gz

  build-linux-x64-clang:
#    if: ${{ false }}  # disable
    name: linux-clang
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        platform: [x64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: compile v8
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          export PATH="$GITHUB_WORKSPACE/depot_tools:${PATH}"
          gclient
          fetch v8
          cd ${{ github.workspace }}/v8
          git checkout branch-heads/$V8_VERSION
          gclient sync
          ./build/install-build-deps.sh
          mkdir -p out.gn/linux.${{ matrix.platform }}.release/
          cp ${{ github.workspace }}/args.linux.${{ matrix.platform }}.clang.gn $GITHUB_WORKSPACE/v8/out.gn/linux.${{ matrix.platform }}.release/args.gn
          gn gen out.gn/linux.${{ matrix.platform }}.release
          ninja v8_monolith -C out.gn/linux.${{ matrix.platform }}.release/
          gn args --list out.gn/linux.${{ matrix.platform }}.release
          gzip -9 -c out.gn/linux.${{ matrix.platform }}.release/obj/libv8_monolith.a > ../libv8_monolith-linux-${{ matrix.platform }}.a.gz
          tar -zcvf ../gen-linux-${{ matrix.platform }}.tar.gz out.gn/linux.${{ matrix.platform }}.release/gen
      - name: Upload static library
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/libv8_monolith-linux-${{ matrix.platform }}.a.gz
          name: libv8_monolith-linux-${{ matrix.platform }}.clang.a.gz
      - name: Upload generated source
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/gen-linux-${{ matrix.platform }}.tar.gz
          name: gen-linux-${{ matrix.platform }}.clang.tar.gz

  build-linux-arm64:
    if: ${{ false }}  # disable
    name: linux-gcc
    runs-on: ubuntu-24.04-arm
    strategy:
      fail-fast: false
      matrix:
        platform: [arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: compile v8
        env:
          CC: gcc-13
          CXX: g++-13
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          export PATH="$GITHUB_WORKSPACE/depot_tools:${PATH}"
          gclient
          fetch v8
          cd ${{ github.workspace }}/v8
          git checkout branch-heads/$V8_VERSION
          gclient sync
          ./build/install-build-deps.sh
          mkdir -p out.gn/linux.${{ matrix.platform }}.release/
          cp ${{ github.workspace }}/args.linux.${{ matrix.platform }}.gn $GITHUB_WORKSPACE/v8/out.gn/linux.${{ matrix.platform }}.release/args.gn
          gn gen out.gn/linux.${{ matrix.platform }}.release
          ninja v8_monolith -C out.gn/linux.${{ matrix.platform }}.release/
          gn args --list out.gn/linux.${{ matrix.platform }}.release
          gzip -9 -c out.gn/linux.${{ matrix.platform }}.release/obj/libv8_monolith.a > ../libv8_monolith-linux-${{ matrix.platform }}.a.gz
          tar -zcvf ../gen-linux-${{ matrix.platform }}.tar.gz out.gn/linux.${{ matrix.platform }}.release/gen
      - name: Upload static library
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/libv8_monolith-linux-${{ matrix.platform }}.a.gz
          name: libv8_monolith-linux-${{ matrix.platform }}.a.gz
      - name: Upload generated source
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/gen-linux-${{ matrix.platform }}.tar.gz
          name: gen-linux-${{ matrix.platform }}.tar.gz

  build-linux-arm64-clang:
    if: ${{ false }}  # disable - cannot get this to work on github actions
    name: linux-clang
    runs-on: ubuntu-22.04-arm
    strategy:
      fail-fast: false
      matrix:
        platform: [x64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: compile v8
        env:
          CC: gcc-12
          CXX: g++-12
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          export PATH="$GITHUB_WORKSPACE/depot_tools:${PATH}"
          gclient
          fetch v8
          cd ${{ github.workspace }}/v8
          git checkout branch-heads/$V8_VERSION
          gclient sync
          ./build/install-build-deps.sh
          mkdir -p out.gn/linux.arm64.release/
          cp ${{ github.workspace }}/args.linux.arm64.clang.gn $GITHUB_WORKSPACE/v8/out.gn/linux.arm64.release/args.gn
          gn gen out.gn/linux.arm64.release
          ninja v8_monolith -C out.gn/linux.arm64.release/
          gn args --list out.gn/linux.arm64.release
          gzip -9 -c out.gn/linux.arm64.release/obj/libv8_monolith.a > ../libv8_monolith-linux-arm64.a.gz
          tar -zcvf ../gen-linux-arm64.tar.gz out.gn/linux.arm64.release/gen
      - name: Upload static library
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/libv8_monolith-linux-arm64.a.gz
          name: libv8_monolith-linux-arm64.clang.a.gz
      - name: Upload generated source
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/gen-linux-arm64.tar.gz
          name: gen-linux-arm64.clang.tar.gz

  build-mac:
#    if: ${{ false }}  # disable
    name: mac
    runs-on: macos-15
    strategy:
      fail-fast: false
      matrix:
        platform: [x64,arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: build v8
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          export PATH="$GITHUB_WORKSPACE/depot_tools:${PATH}"
          gclient
          fetch v8
          cd ${{ github.workspace }}/v8
          git checkout branch-heads/$V8_VERSION
          gclient sync
          mkdir -p out.gn/${{ matrix.platform }}.release/
          cp ${{ github.workspace }}/args.mac.${{ matrix.platform }}.gn ${{ github.workspace }}/v8/out.gn/${{ matrix.platform }}.release/args.gn
          gn gen out.gn/${{ matrix.platform }}.release
          ninja v8_monolith -C out.gn/${{ matrix.platform }}.release/
          gn args --list out.gn/${{ matrix.platform }}.release
          gzip -9 -c out.gn/${{ matrix.platform }}.release/obj/libv8_monolith.a > ../libv8_monolith-mac-${{ matrix.platform }}.a.gz
          tar -zcvf ../gen-mac-${{ matrix.platform }}.tar.gz out.gn/${{ matrix.platform }}.release/gen
      - name: Upload static library
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/libv8_monolith-mac-${{ matrix.platform }}.a.gz
          name: libv8_monolith-mac-${{ matrix.platform }}.a.gz
      - name: Upload generated source
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/gen-mac-${{ matrix.platform }}.tar.gz
          name: gen-mac-${{ matrix.platform }}.tar.gz

  build-windows-msvc:
    if: ${{ false }}  # disable
    name: windows-msvc
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [x64,arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: 3.12
      - name: setup env
        shell: pwsh
        run: |
          echo "${{ github.workspace }}/depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "vs2022_install=C:\Program Files\Microsoft Visual Studio\2022\Enterprise" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: prepared v8 build environment
        run: |
          git config --global depot-tools.allowGlobalGitConfig true
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          gclient
          fetch v8
          cd v8
          git checkout branch-heads/$V8_VERSION
          gclient sync
          cp ../msvc.patch ./
          git apply -v msvc.patch
      - name: compile v8 static library
        shell: pwsh
        run: |
          New-Item -ItemType directory -Path v8/out.gn/${{ matrix.platform }}.release/
          Copy-Item "args.win.${{ matrix.platform }}.gn" -Destination "v8/out.gn/${{ matrix.platform }}.release/args.gn" -force
          Set-Location -Path v8
          gn gen out.gn/${{ matrix.platform }}.release
          ninja v8_monolith -C out.gn/${{ matrix.platform }}.release/
          gn args --list out.gn/${{ matrix.platform }}.release
      - name: compress artifacts
        shell: pwsh
        run: |
          Compress-Archive -Path ${{ github.workspace }}/v8/out.gn/${{ matrix.platform }}.release/obj/v8_monolith.lib -Destination ${{ github.workspace }}/libv8_monolith-win-${{ matrix.platform }}.zip
          Compress-Archive -Path ${{ github.workspace }}/v8/out.gn/${{ matrix.platform }}.release/gen -Destination ${{ github.workspace }}/gen-win-${{ matrix.platform }}.zip
      - name: Upload static library
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/libv8_monolith-win-${{ matrix.platform }}.zip
          name: libv8_monolith-win-${{ matrix.platform }}.msvc.zip
      - name: Upload generated source
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/gen-win-${{ matrix.platform }}.zip
          name: gen-win-${{ matrix.platform }}.msvc.zip

  build-windows-clang:
#    if: ${{ false }}  # disable
    name: windows-clang
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        platform: [x64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: setup env
        shell: pwsh
        run: |
          echo "${{ github.workspace }}/depot_tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "DEPOT_TOOLS_WIN_TOOLCHAIN=0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
      - name: prepared v8 build environment
        run: |
          git config --global depot-tools.allowGlobalGitConfig true
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
          gclient
          fetch v8
          cd v8
          git checkout branch-heads/$V8_VERSION
          gclient sync
      - name: compile v8 static library
        shell: pwsh
        run: |
          New-Item -ItemType directory -Path v8/out.gn/${{ matrix.platform }}.release/
          Copy-Item "args.win.${{ matrix.platform }}.clang.gn" -Destination "v8/out.gn/${{ matrix.platform }}.release/args.gn" -force
          Set-Location -Path v8
          gn gen out.gn/${{ matrix.platform }}.release
          ninja v8_monolith -C out.gn/${{ matrix.platform }}.release/
          gn args --list out.gn/${{ matrix.platform }}.release
      - name: compress artifacts
        shell: pwsh
        run: |
          Compress-Archive -Path ${{ github.workspace }}/v8/out.gn/${{ matrix.platform }}.release/obj/v8_monolith.lib -Destination ${{ github.workspace }}/libv8_monolith-win-${{ matrix.platform }}.zip
          Compress-Archive -Path ${{ github.workspace }}/v8/out.gn/${{ matrix.platform }}.release/gen -Destination ${{ github.workspace }}/gen-win-${{ matrix.platform }}.zip
      - name: Upload static library
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/libv8_monolith-win-${{ matrix.platform }}.zip
          name: libv8_monolith-win-${{ matrix.platform }}.clang.zip
      - name: Upload generated source
        uses: actions/upload-artifact@v4
        with:
          path: ${{ github.workspace }}/gen-win-${{ matrix.platform }}.zip
          name: gen-win-${{ matrix.platform }}.clang.zip

  test-mac-14-sdks:
    if: ${{ false }}  # disable
    name: test-mac-14-sdks
    runs-on: macos-14
    strategy:
      fail-fast: false
      matrix:
        platform: [x64,arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: build v8
        run: |
          ls -lah /Applications/Xcode_16.2.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/

  test-mac-15-sdks:
    if: ${{ false }}  # disable
    name: test-mac-15-sdks
    runs-on: macos-15
    strategy:
      fail-fast: false
      matrix:
        platform: [x64,arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: build v8
        run: |
          ls -lah /Applications/Xcode_16.4.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/
